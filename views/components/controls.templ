package components 

import (
    "fmt"
    "leeg/model"
    "leeg/views"
)

templ Team(team model.Team, outOfBand bool) {
    <li id={fmt.Sprintf("team-%v", team.ID)} 
        if outOfBand {
            hx-swap-oob="true"
        }
        class="mx-auto min-w-[300px] max-w-[500px] my-2 font-bold border bg-white rounded border-black">
        <span class="w-full flex flex-row m-2">
            <span class="w-full flex flex-col items-end">
                <span class="mr-3">{ team.Name }</span>
            </span>
            <span class="w-full flex flex-col items-start">
                <span class="ml-3">{ fmt.Sprintf("%v/%v", team.Wins(), team.Losses()) }</span>
            </span>
        </span>
    </li>
}

templ Game(game model.Game, editing bool, outOfBand bool) {
    <span id={fmt.Sprintf("game-%v", game.ID)}
        class="col-span-6 min-w-[210px] flex flex-col p-2 m-2 bg-white border rounded-sm border-black">
        if outOfBand {
            hx-swap-oob="true"
        }
        <span class="mx-auto flex flex-col" 
            if !game.Complete() {
                hx-get={fmt.Sprintf("/leegs/%v/rounds/%v/games/%v?%v", views.LeegID(ctx), views.RoundID(ctx), game.ID, views.ToggleEdit(editing))}
                hx-target={fmt.Sprintf("#game-%v", game.ID)} hx-swap="outerHTML"    
            }
        >
            <span class="mx-auto">
                { fmt.Sprintf("Game %v", game.GameNumber) }
            </span>
            <span class="mx-auto">
                { fmt.Sprintf("%v vs %v", game.TeamA.Text, game.TeamB.Text) }
            </span>
            if !editing {
                <span class="mx-auto">
                    if game.Winner.ID == "" {
                        Winner: TBD
                    } else {
                        {fmt.Sprintf("Winner: %v", game.Winner.Text)}
                    }
                </span>
            }
        </span>
        
        if editing {
            <form class="mx-auto" hx-swap="outerHTML" hx-target={fmt.Sprintf("#game-%v", game.ID)}
                    hx-put={fmt.Sprintf("/leegs/%v/rounds/%v/games/%v", views.LeegID(ctx), views.RoundID(ctx), game.ID )}>
                <label class="uk-form-label" for="winner">Winner</label>
                <select name="winner">
                    <option value={game.TeamA.ID}>{game.TeamA.Text}</option>
                    <option value={game.TeamB.ID}>{game.TeamB.Text}</option>
                </select>
                <button>go</button>
            </form>
        } else {
           
        }
    </span>
}


templ RoundControls(round model.Round) {
    <span id={fmt.Sprintf("round-controls-%v", round.ID)} class="w-full mx-auto flex flex-row m-2">
        if !round.Scheduled() {
            <span class="mx-auto"
                hx-ext="multi-swap"
                hx-swap={fmt.Sprintf("multi:#round-games-%v:beforeend,#round-controls-%v:outerHTML", round.ID, round.ID)} 
                hx-post={fmt.Sprintf("/leegs/%v/rounds/%v/games", round.LeegID, round.ID)}
            >
                Request Game
            </span>
        } else {
            <span class="mx-auto">
                Round Scheduled
            </span>
        }
    </span>
}

templ RoundContainer(round model.EntityRef) {
     <span class="mx-auto p-3 flex flex-col items-center">
        @RoundHeader(views.LeegID(ctx), round, false, false)
        @RoundContent(model.Round{}, round, map[string]model.Game{})
     </span>
}

templ RoundHeader(leegID string, round model.EntityRef, showOpen bool, outOfBand bool) {
    <span id={ fmt.Sprintf("round-%v", round.ID) }
        if showOpen {
            class="mx-auto my-2 min-w-[300px] max-w-[550px] p-1 bg-gray-400 white-text-shadow border flex flex-row items-center rounded border-black"
        } else {
            class="mx-auto my-2 min-w-[300px] max-w-[550px] p-1 bg-white border flex flex-row items-center rounded border-black"
        }
        if outOfBand {
            hx-swap-oob="true"
        }
    >
        <span class="flex flex-col mx-auto">
            <span class="mx-4 my-1 text-sm italic"
                    hx-get={fmt.Sprintf("/leegs/%v/rounds/%v?%v", leegID, round.ID, views.ToggleOpen(!showOpen))} 
                    hx-swap="outerHTML"
                    hx-target={fmt.Sprintf("#round-content-%v", round.ID)}
            >
                { round.Text }
            </span>
        </span>
    </span>
}

templ RoundContent(round model.Round, roundRef model.EntityRef, gamesMap map[string]model.Game) {
    if round.ID == "" {
        <span id={fmt.Sprintf("round-content-%v", roundRef.ID)}>
            @Empty()
        </span>
    } else {
        <span id={fmt.Sprintf("round-content-%v", round.ID)}>
            @Round(round, gamesMap)
        </span>
    }
}

templ Round(round model.Round, gamesMap map[string]model.Game) {
    <span class="mx-auto min-w-[454px] max-w-[550px] border flex flex-row items-center rounded border-black">
        <span class="flex flex-col mx-auto">
            <span class="mx-auto flex flex-row font-bold">
                { fmt.Sprintf("Round %v", round.RoundNumber)}
            </span>
            @RoundGames(round, gamesMap)
            @RoundControls(round)
        </span>
    </span>
}

templ RoundGames(round model.Round, gamesMap map[string]model.Game) {
    <span id={fmt.Sprintf("round-games-%v", round.ID)} class="flex !pl-0 grid grid-cols-6 sm:grid-cols-12">
        for _, game := range round.Games {
            @Game(gamesMap[game.ID], false, false)
        }
    </span>
}

templ CompletedLeegRound(round model.Round) {
    <span class="w-full mx-4 my-1 text-med">
        { fmt.Sprintf("Round %v", round.RoundNumber)}
    </span>
}